#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: OpenDocument Text Exporter for Emacs' Org Mode
#+AUTHOR: Jambunathan K
#+EMAIL: kjambunathan@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.2.1)

# #+TEXINFO_FILENAME:
# #+TEXINFO_CLASS: info
# #+TEXINFO_HEADER:
# #+TEXINFO_POST_HEADER:
# #+SUBTITLE:
# #+SUBAUTHOR:
# #+TEXINFO_DIR_CATEGORY:
# #+TEXINFO_DIR_TITLE:
# #+TEXINFO_DIR_DESC:
# #+TEXINFO_PRINTED_TITLE:

#+EXPORT_FILE_NAME: org-odt.texi

#+macro: kbd (eval (let ((case-fold-search nil) (regexp (regexp-opt '("SPC" "RET" "LFD" "TAB" "BS" "ESC" "DELETE" "SHIFT" "Ctrl" "Meta" "Alt" "Cmd" "Super" "UP" "LEFT" "RIGHT" "DOWN") 'words))) (format "@@texinfo:@kbd{@@%s@@texinfo:}@@" (replace-regexp-in-string regexp "@@texinfo:@key{@@\\&@@texinfo:}@@" $1 t))))

# #+export_file_name: org.texi

# #+texinfo_dir_category: Emacs editing modes
# #+texinfo_dir_title: Org Mode: (org)
# #+texinfo_dir_desc: Outline-based notes management and organizer

#+texinfo: @defindex wn

This manual documents =ox-odt=, an Emacs Lisp library that exports
[[https://orgmode.org/][Org mode]] files to
[[http://www.oasis-open.org/committees/office][OpenDocument format]]
format. Office Documents produced by this backend are compliant with
[[http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html][OpenDocument-v1.2
Specification]], and can be opened with
[[http://www.libreoffice.org/][LibreOffice]] or any other compliant
OpenDocument application.

This manual is for a /fork/ of the [[info:org::OpenDocument Text
export]] engine that ships with stock Emacs.  If you are an existing
user of the stock Emacs backend, and want to learn about new features
/exclusive/ to this fork jump right to [[*What is New]] section.

#+texinfo: @contents

* Project Summary

- Description :: The Authoritative fork of Org mode's ODT exporter

- URL :: https://github.com/kjambunathan/org-mode-ox-odt

- Version ::

- Depends on ::

- Suggests ::

- Enhances ::

- Published ::

- Author :: Jambunathan K <kjambuanthan at gmail.com>

- Maintainer :: Jambunathan K <kjambuanthan at gmail.com>

- BugReports :: https://github.com/kjambunathan/org-mode-ox-odt/issues

- License ::

- Downloads ::

  - ELPA URL :: https://kjambunathan.github.io/elpa/

  - User Manual (online HTML) :: https://kjambunathan.github.io/org-mode-ox-odt/

  # - User Manual (PDF) :: https://kjambunathan.github.io/org-mode-ox-odt/org-odt.pdf

* Getting Started with ODT export
:PROPERTIES:
:DESCRIPTION: What packages ODT exporter relies on
:END:

** Pre-requisites for ODT export
:PROPERTIES:
:DESCRIPTION: What packages ODT exporter relies on
:END:

The ODT backend depends on the following programs

| Program             | Purpose                                    |
|---------------------+--------------------------------------------|
| =zip=[fn:1]         | To produce OpenDocument files              |
| =unzip=[fn:1]       | To unzip  custom styles                    |
|---------------------+--------------------------------------------|
| =identify=[fn:2]    | To identify the size of an inline image    |
|---------------------+--------------------------------------------|
| =latex=[fn:3]       | To compile LaTeX fragments to =dvi= images |
| =dvisgm=[fn:3]      | To convert =dvi= images to =svg=           |
| =dvipng=[fn:4]      | To convert =dvi= images to =png=           |
| =convert=[fn:5]     | To convert inline =pdf= to =png=           |
|---------------------+--------------------------------------------|
| =latexmlmath=[fn:6] | To convert LaTeX math snippets to MathML   |
| =mathtoweb=[fn:7]   | ã€ƒ                                         |
|---------------------+--------------------------------------------|
| =jabref=[fn:8]      | To handle bibliography and citations       |


Of these, =zip= is essential.  Rest are optional.

** Installation

You can install the OpenDocument Text export backend using the Emacs
package manager.  The archive URL for the package is
[[https://kjambunathan.github.io/elpa/]].

A typical configuration look like this

#+begin_src elisp
(custom-set-variables
 '(package-archives
   (quote
    (("gnu" . "https://elpa.gnu.org/packages/")
     ("ox-odt" . "https://kjambunathan.github.io/elpa/")))))
#+end_src

In the =*Packages*= buffer, packages from this archive show up as below

#+begin_example
JabrefExportChicagoODF 1.2.2      ... Jabref Plugin for export to Chicago Manual of Style in OpenDocumentFormat
ox-odt                 9.2.6.263  ... OpenDocument Text Exporter for Org Mode
#+end_example

** Configuration

Here is a sample configuration.

#+begin_example
(custom-set-variables
 '(org-odt-convert-process "LibreOffice")
 '(org-odt-preferred-output-format "docx")
 '(org-odt-transform-processes
   '(("Optimize Column Width of all Tables"
      "soffice" "--norestore" "--invisible" "--headless"
      "macro:///OrgMode.Utilities.OptimizeColumnWidth(%I)")
     ("Update All"
      "soffice" "--norestore" "--invisible" "--headless"
      "macro:///OrgMode.Utilities.UpdateAll(%I)")
     ("Reload"
      "soffice" "--norestore" "--invisible" "--headless"
      "macro:///OrgMode.Utilities.Reload(%I)")))
 '(org-jabref-command '("/opt/jabref/bin/JabRef" "-n"))
 '(org-latex-to-mathml-convert-command "java -jar %j -unicode -force -df %o %I")
 '(org-latex-to-mathml-jar-file
   "/home/kjambunathan/src/org-mode-ox-odt/contrib/odt/mathtoweb/mathtoweb.jar"))

(setcdr (assq 'system org-file-apps-defaults-gnu) "xdg-open %s")

(require 'ox-jabref)
#+end_example

Above configuration sets up the ODT backend as follows:

1. Use ="LibreOffice"= (i.e., =soffice= executable) as the document converter
2. Generate a =docx= document for every =odt= document
3. Process the =odt= document with a set of LibreOffice Basic Macros to
   - Optimize the column width of all tables
   - Update cross-references, table of contents etc.
   - (if you are already viewing a past version of a =odt= file),
     re-load the new file in the same application window.
4. Tell where your =JabRef= and =mathtoweb= executables are located, and how they are invoked.
5. (if you are using a GNU system) open the =odt= document with your
   preferred OpenDocument viewer, presumably =LibreOffice=.
6. Load =ox-jabref= so as to produce documents with bibliography and citations .

* ODT export commands
:PROPERTIES:
:DESCRIPTION: How to invoke ODT export
:END:

** Exporting to ODT

- {{{kbd(C-c C-e o o)}}} (=org-odt-export-to-odt=) ::

     #+kindex: C-c C-e o
     #+findex: org-odt-export-to-odt
     Export as OpenDocument Text file.

     #+vindex: org-odt-preferred-output-format
     If =org-odt-preferred-output-format= is specified, automatically
     convert the exported file to that format. See [[*Automatically
     exporting to other formats]].

- {{{kbd(C-c C-e o O)}}} ::

     #+kindex: C-c C-e O
     Export as OpenDocument Text file and open the resulting file.

     #+vindex: org-odt-preferred-output-format
     If =org-odt-preferred-output-format= is specified, open the
     converted file instead. See [[*Automatically exporting to other
     formats]].

* Extending ODT export
:PROPERTIES:
:DESCRIPTION: How to produce 'doc', 'pdf' files
:END:

The ODT exporter can interface with a variety of document converters
and supports popular converters out of the box. As a result, you can
use it to export to formats like =doc= or convert a document from one
format (say =csv=) to another format (say =ods= or =xls=).

#+cindex: @file{unconv}
#+vindex: org-odt-convert-process
If you have a working installation of LibreOffice, a document
converter is pre-configured for you and you can use it right away. If
you would like to use =unoconv= as your preferred converter, customize
the variable =org-odt-convert-process= to point to =unoconv=. You can
also use your own favorite converter or tweak the default settings of
the LibreOffice and =unoconv= converters. See [[*Configuring a document
converter]].

** Automatically exporting to other formats

#+vindex: org-odt-preferred-output-format
Very often, you will find yourself exporting to ODT format, only to
immediately save the exported document to other formats like =doc=,
=docx=, =rtf=, =pdf= etc. In such cases, you can specify your
preferred output format by customizing the variable
=org-odt-preferred-output-format=. This way, the export commands (see
[[*Exporting to ODT]]) can be extended to export to a format that is of
immediate interest to you.

** Converting between document formats

There are many document converters in the wild which support
conversion to and from various file formats, including, but not
limited to the ODT format. LibreOffice converter, mentioned above, is
one such converter.  Once a converter is configured, you can interact
with it using the following command.

- {{{kbd(M-x org-odt-convert)}}} ::

     #+findex: org-odt-convert
     Convert an existing document from one format to another. With a
     prefix argument, also open the newly produced file.

* Applying custom styles
:PROPERTIES:
:DESCRIPTION: How to apply custom styles to the output
:END:

The ODT exporter ships with a set of OpenDocument styles (see [[*Working
with OpenDocument style files]]) that ensure a well-formatted
output. These factory styles, however, may not cater to your specific
tastes. To customize the output, you can either modify the above
styles files directly, or generate the required styles using an
application like LibreOffice. The latter method is suitable for expert
and non-expert users alike, and is described here.

** Applying custom styles - the easy way

1. Create a sample =example.org= file with the below settings and
   export it to ODT format.

   #+BEGIN_EXAMPLE
       #+OPTIONS: H:10 num:t
   #+END_EXAMPLE

2. Open the above =example.odt= using LibreOffice. Use the Stylist to
   locate the target styles - these typically have the =Org= prefix -
   and modify those to your taste. Save the modified file either as an
   OpenDocument Text (=.odt=) or OpenDocument Template (=.ott=) file.

3.
   #+vindex: org-odt-styles-file
   Customize the variable =org-odt-styles-file= and point it to the
   newly created file. For additional configuration options see
   [[*Overriding factory styles]].

   #+cindex: @samp{ODT_STYLES_FILE}, keyword
   If you would like to choose a style on a per-file basis, you can
   use the =#+ODT_STYLES_FILE= option. A typical setting will look
   like

   #+BEGIN_EXAMPLE
       #+ODT_STYLES_FILE: "/path/to/example.ott"
   #+END_EXAMPLE

   or

   #+BEGIN_EXAMPLE
       #+ODT_STYLES_FILE: ("/path/to/file.ott" ("styles.xml" "image/hdr.png"))
   #+END_EXAMPLE

** Using third-party styles and templates

You can use third-party styles and templates for customizing your
output. This will produce the desired output only if the template
provides all style names that the =ODT= exporter relies on. Unless
this condition is met, the output is going to be less than
satisfactory. So it is highly recommended that you only work with
templates that are directly derived from the factory settings.

* Links in ODT export
:PROPERTIES:
:DESCRIPTION: How links will be interpreted and formatted
:END:

ODT exporter creates native cross-references for internal links. It
creates Internet-style links for all other links.

A link with no description and destined to a regular (un-itemized)
outline heading is replaced with a cross-reference and section number
of the heading.

A =\ref{label}=-style reference to an image, table etc. is replaced
with a cross-reference and sequence number of the labeled entity. See
[[*Labels and captions in ODT export]].


* List Tables in ODT export
:PROPERTIES:
:DESCRIPTION: How Tables are exported
:END:

A =List Table=, in simple terms, is a list that is typeset as a table.
Use it to create tables with multi-paragraph content.

- Why a =List Table=? ::

Org mode's tables are line-oriented i.e., each row (and hence a cell)
cannot span multiple lines.  This choice has serious limitations.
Specifically, 

- a table cell cannot have more than a single paragraph

- if the sole paragraph has copious text, the table will overflow your
  display screen, and editing or reviewing such tables is very
  cumbersome and annoying.

A list table overcomes the above problem.

Lists that are marked with attribute `:list-table' are called as
list tables.  They will be rendered as a table within the exported
document.

** Examples

- A simple list table ::

Consider an example.  The following list table

#+ATTR_ODT: :rel-width 80
#+ATTR_ODT: :list-table t
-
  - Row 1, Col 1 
  - Row 1, Col 2 
  - Row 1, Col 3 
  - Row 1, Col 4 
- -----
  - Row 2, Col 1 
  - Row 2, Col 2 
  - Row 2, Col 3 
  - Row 2, Col 4 

will be exported as though it were an Org table like the one show
below.

| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 | Row 1, Col 4 |
| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 | Row 2, Col 4 |

List tables can contain hrule (see example above).  They can also
contain table specific attributes.  Except for column alignment
(i.e., lrc spec), all other attributes (column sizing and grouping)
are honored on export.

- A list table with rules, column size and alignments :: 

#+ATTR_ODT: :list-table t
- | /    | <    |    > |       |
- | <l8> | <r4> | <c2> | <l1>  |
- --------
  - Row 1
  - Row 1.1
    - Subitem under 1.1
    - Yet another subitem under 1.1
  - Row 1.2
  - Row 1.3
- --------
  - Row 2
  - Row 2.1

    Subtext for 2.1
  - Row 2.2
  - Row 2.3
- --------

you could get, the following table, in to the exported document.

|-------+-----------------------------------+---------+---------|
| Row 1 | - Row 1.1                         | Row 1.2 | Row 1.3 |
|       |   - Subitem under 1.1             |         |         |
|       |   - Yet another subitem under 1.1 |         |         |
|-------+-----------------------------------+---------+---------|
| Row 2 | Row 2.1                           | Row 2.2 | Row 2.3 |
|       |                                   |         |         |
|       | Subtext for 2.1                   |         |         |
|-------+-----------------------------------+---------+---------|


- List table with table and figures :: 

MOTIVATION: 
* Tables in ODT export
:PROPERTIES:
:DESCRIPTION: How Tables are exported
:END:

Export of native Org mode tables (See [[info:org::Tables]]) and simple
=table.el= tables is supported. However, export of complex =table.el=
tables - tables that have column or row spans - is not supported. Such
tables are stripped from the exported document.

By default, a table is exported with top and bottom frames and with
rules separating row and column groups (See [[info:org::Column
Groups]]). Furthermore, all tables are typeset to occupy the same width.
If the table specifies alignment and relative width for its columns
(See [[info:org::Column Width and Alignment]]) then these are honored on
export.[fn:9]

#+cindex: @samp{ATTR_ODT}, keyword
You can control the width of the table by specifying =:rel-width=
property using an =#+ATTR_ODT= line.

For example, consider the following table which makes use of all the
rules mentioned above.

#+BEGIN_EXAMPLE
    #+ATTR_ODT: :rel-width 50
    | Area/Month    |   Jan |   Feb |   Mar |   Sum |
    |---------------+-------+-------+-------+-------|
    | /             |     < |       |       |     < |
    | <l13>         |  <r5> |  <r5> |  <r5> |  <r6> |
    | North America |     1 |    21 |   926 |   948 |
    | Middle East   |     6 |    75 |   844 |   925 |
    | Asia Pacific  |     9 |    27 |   790 |   826 |
    |---------------+-------+-------+-------+-------|
    | Sum           |    16 |   123 |  2560 |  2699 |
#+END_EXAMPLE

On export, the table will occupy 50% of text area. The columns will be
sized (roughly) in the ratio of 13:5:5:5:6. The first column will be
left-aligned and rest of the columns will be right-aligned. There will
be vertical rules after separating the header and last columns from
other columns. There will be horizontal rules separating the header
and last rows from other rows.

#+cindex: @samp{ATTR_ODT}, keyword
If you are not satisfied with the above formatting options, you can
create custom table styles and associate them with a table using the
=#+ATTR_ODT= line. See [[*Customizing tables in ODT export]].

* Images in ODT export
:PROPERTIES:
:DESCRIPTION: How to insert images
:END:

** Embedding images

You can embed images within the exported document by providing a link
to the desired image file with no link description. For example, to
embed =img.png= do either of the following:

#+BEGIN_EXAMPLE
    [[file:img.png]]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    [[./img.png]]
#+END_EXAMPLE

** Embedding clickable images

You can create clickable images by providing a link whose description
is a link to an image file. For example, to embed a image
org-mode-unicorn.png which when clicked jumps to [[http://Orgmode.org]]
website, do the following

#+BEGIN_EXAMPLE
    [[http://orgmode.org][./org-mode-unicorn.png]]
#+END_EXAMPLE

** Sizing and scaling of embedded images

#+cindex: @samp{ATTR_ODT}, keyword
You can control the size and scale of the embedded images using the
=#+ATTR_ODT= attribute.

#+vindex: org-odt-pixels-per-inch
The exporter specifies the desired size of the image in the final
document in units of centimeters. In order to scale the embedded
images, the exporter queries for pixel dimensions of the images using
one of a) ImageMagick's identify program or b) Emacs =create-image=
and =image-size= APIs.[fn:10] The pixel dimensions are subsequently
converted in to units of centimeters using
=org-odt-pixels-per-inch=. The default value of this variable is set
to =display-pixels-per-inch=. You can tweak this variable to achieve
the best results.

The examples below illustrate the various possibilities.

- Explicitly size the image ::

     To embed =img.png= as a 10 cm x 10 cm image, do the following:

     #+BEGIN_EXAMPLE
         #+ATTR_ODT: :width 10 :height 10
         [[./img.png]]
     #+END_EXAMPLE

- Scale the image ::

     To embed =img.png= at half its size, do the following:

     #+BEGIN_EXAMPLE
         #+ATTR_ODT: :scale 0.5
         [[./img.png]]
     #+END_EXAMPLE

- Scale the image to a specific width ::

     To embed =img.png= with a width of 10 cm while retaining the
     original height:width ratio, do the following:

     #+BEGIN_EXAMPLE
         #+ATTR_ODT: :width 10
         [[./img.png]]
     #+END_EXAMPLE

- Scale the image to a specific height ::

     To embed =img.png= with a height of 10 cm while retaining the
     original height:width ratio, do the following

     #+BEGIN_EXAMPLE
         #+ATTR_ODT: :height 10
         [[./img.png]]
     #+END_EXAMPLE

** Anchoring of images

#+cindex: @samp{ATTR_ODT}, keyword
You can control the manner in which an image is anchored by setting
the =:anchor= property of it's =#+ATTR_ODT= line. You can specify one
of the the following three values for the =:anchor= property -
="as-char"=, ="paragraph"= and ="page"=.

To create an image that is anchored to a page, do the following:

#+BEGIN_EXAMPLE
    #+ATTR_ODT: :anchor "page"
    [[./img.png]]
#+END_EXAMPLE

* Math formatting in ODT export
:PROPERTIES:
:DESCRIPTION: How LaTeX fragments are formatted
:END:

The ODT exporter has special support for handling math.

** Working with LaTeX math snippets
:PROPERTIES:
:DESCRIPTION: How to embed LaTeX math fragments
:END:

LaTeX math snippets (See [[info:org::LaTeX fragments]]) can be embedded in the
ODT document in one of the following ways:

1. MathML

   This option is activated on a per-file basis with

   #+BEGIN_EXAMPLE
       #+OPTIONS: LaTeX:t
   #+END_EXAMPLE

   With this option, LaTeX fragments are first converted into MathML
   fragments using an external LaTeX-to-MathML converter program. The
   resulting MathML fragments are then embedded as an OpenDocument
   Formula in the exported document.

   #+vindex: org-latex-to-mathml-convert-command
   #+vindex: org-latex-to-mathml-jar-file
   You can specify the LaTeX-to-MathML converter by customizing the
   variables =org-latex-to-mathml-convert-command= and
   =org-latex-to-mathml-jar-file=.

   If you prefer to use MathToWeb[fn:9] as your converter, you can
   configure the above variables as shown below.

   #+BEGIN_SRC lisp
     (setq org-latex-to-mathml-convert-command
	   "java -jar %j -unicode -force -df %o %I"
	   org-latex-to-mathml-jar-file
	   "/path/to/mathtoweb.jar")
   #+END_SRC

   You can use the following commands to quickly verify the
   reliability of the LaTeX-to-MathML converter.

   - {{{kbd(M-x org-export-as-odf)}}} ::

	#+findex: org-export-as-odf
	Convert a LaTeX math snippet to OpenDocument formula (=.odf=)
        file.

   - {{{kbd(M-x org-export-as-odf-and-open)}}} ::

	#+findex: org-export-as-odf-and-open
	Convert a LaTeX math snippet to OpenDocument formula (=.odf=)
        file and open the formula file with the system-registered
        application.

2.  PNG images

   This option is activated on a per-file basis with

   #+BEGIN_EXAMPLE
       #+OPTIONS: LaTeX:dvipng
   #+END_EXAMPLE

   With this option, LaTeX fragments are processed into PNG images and
   the resulting images are embedded in the exported document. This
   method requires that the dvipng program be available on your
   system.

** Working with MathML or OpenDocument formula files
:PROPERTIES:
:DESCRIPTION: How to embed equations in native format
:END:

For various reasons, you may find embedding LaTeX math snippets in an
ODT document less than reliable. In that case, you can embed a math
equation by linking to its MathML (=.mml=) source or its OpenDocument
formula (=.odf=) file as shown below:

#+BEGIN_EXAMPLE
    [[./equation.mml]]
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    [[./equation.odf]]
#+END_EXAMPLE

* Labels and captions in ODT export
:PROPERTIES:
:DESCRIPTION: How captions are rendered
:END:

You can label and caption various category of objects - an inline
image, a table, a LaTeX fragment or a Math formula - using =#+LABEL=
and =#+CAPTION= lines. See [[info:emacs::File Archives]]. ODT exporter
enumerates each labeled or captioned object of a given category
separately. As a result, each such object is assigned a sequence
number based on order of it's appearance in the Org file.

In the exported document, a user-provided caption is augmented with
the category and sequence number. Consider the following inline image
in an Org file.

#+BEGIN_EXAMPLE
    #+CAPTION: Bell curve
    #+LABEL:   fig:SED-HR4049
    [[./img/a.png]]
#+END_EXAMPLE

It could be rendered as shown below in the exported document.

#+BEGIN_EXAMPLE
    Figure 2: Bell curve
#+END_EXAMPLE

#+vindex: org-odt-category-strings
You can modify the category component of the caption by customizing
the variable =org-odt-category-strings=. For example, to tag all
embedded images with the string =Illustration= (instead of the default
=Figure=) use the following setting.

#+BEGIN_SRC lisp
  (setq org-odt-category-strings
	'(("en" "Table" "Illustration" "Equation" "Equation")))
#+END_SRC

With this, previous image will be captioned as below in the exported
document.

#+BEGIN_EXAMPLE
    Illustration 2: Bell curve
#+END_EXAMPLE

* Literal examples in ODT export
:PROPERTIES:
:DESCRIPTION: How source and example blocks are formatted
:END:

Export of literal examples (See [[info:org::Literal examples]]) with full
fontification is supported. Internally, the exporter relies on
=htmlfontify.el= to generate all style definitions needed for a fancy
listing.[fn:11] The auto-generated styles have =OrgSrc= as prefix and
inherit their color from the faces used by Emacs =font-lock= library
for the source language.

#+vindex: org-odt-create-custom-styles-for-srcblocks
If you prefer to use your own custom styles for fontification, you can
do so by customizing the variable
=org-odt-create-custom-styles-for-srcblocks=.

#+vindex: org-odt-fontify-srcblocks
You can turn off fontification of literal examples by customizing the
variable =org-odt-fontify-srcblocks=.

* Bibliography and Citations in ODT export

#+texinfo: @wnindex @samp{JabRef}, bibliography, citation
The ODT export back-end uses JabRef to produce Bibliography and
Citations.

=org= doesn't have a /standard/ markup for bibliography and citation
references.  This is true for this export backend as well.  So, the
syntax described in the next section is /specific/ to the ODT backend,
and doesn't carry over to other backends.


- Bibliography and Citation-specific Keywords in ODT export ::

   An =org= file with bibliography and citations look like

   : #+BIB_FILE: "novices.bib"
   : #+ODT_JABREF_CITATION_STYLE: "Numeric" 
   :
   : Some text content
   : 
   : #+BIBLIOGRAPHY: 

   - =BIB_FILE= :: 

        #+cindex: @samp{BIB_FILE}, keyword
        Path to the bibliography file

   - =ODT_JABREF_CITATION_STYLE= ::

        #+cindex: @samp{ODT_JABREF_CITATION_STYLE}, keyword
        Citation style to use.  You can choose one of the following
        options

           - ="Numeric"=
           - ="Chicago (full-note)"=
           - ="Chicago (author-date)"=

   - =BIBLIOGRAPHY= - ::
   
        #+cindex: @samp{SUBTITLE}, keyword
        Bibliography is inserted here.


- How to cite? ::

   The ODT backend recognizes following citation references

   - =\cite{}= snippets :: 

   - Pandoc's Berkeley-style Citations[fn:12] ::

     The semi-official Org-mode citation syntax was designed by Richard
     Lawrence with additions by contributors on the emacs-orgmode mailing
     list. It is based on John MacFarlaneâ€™s pandoc Markdown syntax. Itâ€™s
     dubbed Berkeley syntax due the place of activity of its creators, both
     philosophers at UC Berkeley.  

     - Simple in-text citation :: This is the simplest form of
          citation. It consists of the citation ID prefixed by â€˜@â€™.

            - Example ::

                #+begin_example
                @WatsonCrick1953 showed that DNA forms a double-helix.
                #+end_example

     - In-text citation list :: Citations presented in the text
          unparenthesized are called in-text citations. The syntax for
          these citations is

       #+begin_example
       [cite: =PREFIX=; =INDIVIDUAL-REFERENCE=; ... =INDIVIDUAL-REFERENCE=; =SUFFIX=]
       #+end_example

       where the initial =PREFIX= and final =SUFFIX= are optional. At least one
       =INDIVIDUAL-REFERENCE= must be present. The colon and semicolons here
       are literal and indicate the end of the =TAG= and the end of a =PREFIX= or
       =INDIVIDUAL-REFERENCE= respectively.

       An =INDIVIDUAL-REFERENCE= has the format:

       =PREFIX= =KEY= =SUFFIX=

       The =KEY= is obligatory, and the prefix and suffix are optional.

       A =PREFIX= or =SUFFIX= is arbitrary text (except ;, ], and citation keys).

       - Example ::

           #+begin_example
           [cite: See; @Mandelkern1981; and @Watson1953]
           #+end_example

     - Parenthetical citation :: Citations surrounded by parantheses. The
          syntax is identical to in-text citations, except for the
          additional parentheses enclosing the initial cite tag.

          - Example :: 

             #+begin_example
             [(cite): See; @Mandelkern1981; and @Watson1953]     
             #+end_example

** Configure JabRef with =Chicago.ODF= custom export

- Set up JabRef with =Chicago.ODF= custom export ::

Install Jabref[fn:6].

Navigate to =package-user-dir=, and locate the
=JabrefExportChicagoODF-1.2.2.tar=[fn:13].  Extract it to get a set of
=layout= files.

Launch JabRef GUI.  Navigate to =Options -> Manage custom exports=,
and add an entry for each of the layout files as below.

#+CAPTION:  How to setup JabRef-5.0's =Manage custom exports=
| Export name               | Main layout file                            | Extension |
|---------------------------+---------------------------------------------+-----------|
| Chicago.ODF.abstract      | <whatever>/Chicago.ODF.abstract.layout      | xml       |
| Chicago.ODF.biblio        | <whatever>/Chicago.ODF.biblio.layout        | xml       |
| Chicago.ODF.footend       | <whatever>/Chicago.ODF.footend.layout       | xml       |
| Chicago.ODF.footend.short | <whatever>/Chicago.ODF.footend.short.layout | xml       |
| Chicago.ODF.note          | <whatever>/Chicago.ODF.note.layout          | xml       |
| Chicago.ODF.reference     | <whatever>/Chicago.ODF.reference.layout     | xml       |
| Chicago.ODF.text          | <whatever>/Chicago.ODF.text.layout          | xml       |


#+CAPTION: Screenshot of JabRef-5.0's =Manage custom exports=
[[./JabRefCustomizeExportFormats.png]]

Verify that the Chicago ODF plugin is successfully registered.  In a
terminal, do

     #+begin_example
     /opt/jabref/bin//JabRef -n -h
     #+end_example

Ensure that the =Available export formats= mentions the =Chicago.ODF=.

#+begin_example
Available export formats: html, simplehtml, docbook5, docbook4, din1505,
bibordf, tablerefs, listrefs, tablerefsabsbib, harvard, iso690rtf,
iso690txt, endnote, oocsv, ris, misq, bibtexml, oocalc, ods, MSBib,
mods, xmp, pdf, Chicago.ODF.abstract, Chicago.ODF.biblio,
Chicago.ODF.footend, Chicago.ODF.footend.short, Chicago.ODF.note,
Chicago.ODF.reference, Chicago.ODF.text
#+end_example

- Configure Emacs ::

Tell Emacs about =JabRef='s executable.

Use this if you have =JabRef= executable.

#+begin_example
(custom-set-variables
 '(org-jabref-command '("/opt/jabref/bin/JabRef" "-n")))

(require 'ox-jabref)
#+end_example

Use this if you have JabRef as a =jar= file.

#+begin_example
(custom-set-variables
 '(org-jabref-command '("java -jar ~/Downloads/JabRef-2.9.2.jar" "-n")))

(require 'ox-jabref)
#+end_example


** Example

#+CAPTION: Sample ~novices.bib~
#+begin_example
@book{goossens94,
  author = "Michel Goossens and Frank Mittelbach and Alexander Samarin",
  title = "The {\LaTeX}\space companion",
  publisher = "Addison-Wesley",
  year = 1994
}

@book{kopka95,
  author = "Helmut Kopka and Patrick W. Daly",
  title = "A guide to {\LaTeXe}: document preparation
           for beginners and advanced users",
  publisher = "Addison-Wesley",
  year = 1995
}

@book{novices,
  author = "Nicola L. C. Talbot",
  title = "{\LaTeX}\space for Complete Novices",
  volume = 1,
  publisher = "Dickmaw Books",
  series = "Dickimaw {\LaTeX}\space Series",
  note = "\url{\baseurl/latex/novices/}",
  isbn="978-1-909440-00-5",
  year = 2012
}

@book{thesis,
  author = "Nicola L. C. Talbot",
  title = "Using {\LaTeX}\space to Write a Ph.D. Thesis",
  volume = 2,
  publisher = "Dickmaw Books",
  series = "The Dickimaw {\LaTeX}\space Series",
  note = "\url{\baseurl/latex/thesis/}",
  year = 2012
}
#+end_example

: #+bib_file: "./biblatex-examples/novices.bib"
: #+odt_jabref_citation_style: "Chicago (author-date)"
:
: : Nicola L. C. Talbot in his book [cite:@novices; p. 97] says,
:
: #+begin_quote
: "If you have a large number of citations in your document, it's best
: to use an external bibliographic application, such as =bibtex= or
: =biber=. However, that is beyond the scope of this book.  See,
: instead, /A Guide to LaTeX/ \cite{kopka95}, /The LaTeX Companion/
: \cite{goossens94} or [[http://www.dickimaw-books.com/latex/thesis/][Using LaTeX to Write a PhD Thesis]]
: [cite:@thesis]."
: #+end_quote
:
: #+bibliography:

** Sample Outputs

- Sample output with ~#+ODT_JABREF_CITATION_STYLE: "Numeric"~ ::
# #+CAPTION: ~#+ODT_JABREF_CITATION_STYLE: "Numeric"~
[[./citation-1.png]]

- Sample output with ~#+ODT_JABREF_CITATION_STYLE: "Chicago (full-note)"~ ::
# #+CAPTION: ~#+ODT_JABREF_CITATION_STYLE: "Chicago (full-note)"~
[[./citation-2.png]]

- Sample output with ~#+ODT_JABREF_CITATION_STYLE: "Chicago (author-date)"~ ::
# #+CAPTION: ~#+ODT_JABREF_CITATION_STYLE: "Chicago (author-date)"~
[[./citation-3.png]]

* Advanced topics in ODT export
:PROPERTIES:
:DESCRIPTION: Read this if you are a power user
:END:

If you rely heavily on ODT export, you may want to exploit the full
set of features that the exporter offers. This section describes
features that would be of interest to power users.

** Configuring a document converter
:PROPERTIES:
:DESCRIPTION: How to register a document converter
:END:

The ODT exporter can work with popular converters with little or no
extra configuration from your side. See [[*Extending ODT export]]. If you
are using a converter that is not supported by default or if you would
like to tweak the default converter settings, proceed as below.

1. Register the converter

   #+vindex: org-odt-convert-processes
   Name your converter and add it to the list of known converters by
   customizing the variable =org-odt-convert-processes=. Also specify
   how the converter can be invoked via command-line to effect the
   conversion.

2. Configure its capabilities

   #+vindex: org-odt-convert-capabilities
   Specify the set of formats the converter can handle by customizing
   the variable =org-odt-convert-capabilities=. Use the default value
   for this variable as a guide for configuring your converter. As
   suggested by the default setting, you can specify the full set of
   formats supported by the converter and not limit yourself to
   specifying formats that are related to just the OpenDocument Text
   format.

3. Choose the converter

   #+vindex: org-odt-convert-process
   Select the newly added converter as the preferred one by
   customizing the variable =org-odt-convert-process=.

** Working with OpenDocument style files
:PROPERTIES:
:DESCRIPTION: Explore the internals
:END:

This section explores the internals of the ODT exporter and the means
by which it produces styled documents. Read this section if you are
interested in exploring the automatic and custom OpenDocument styles
used by the exporter.

*** Factory styles

#+vindex: org-odt-styles-dir
The ODT exporter relies on two files for generating its output. These
files are bundled with the distribution under the directory pointed to
by the variable =org-odt-styles-dir=. The two files are:

- =OrgOdtStyles.xml= ::

     This file contributes to the =styles.xml= file of the final =ODT=
     document. This file gets modified for the following purposes:

        1. To control outline numbering based on user settings.

        2. To add styles generated by =htmlfontify.el= for
           fontification of code blocks.

-    =OrgOdtContentTemplate.xml= ::

        This file contributes to the =content.xml= file of the final
     =ODT= document. The contents of the Org outline are inserted
     between the =<office:text>= ... =</office:text>= elements of this
     file.

     	Apart from serving as a template file for the final
     =content.xml=, the file serves the following purposes:

     	1. It contains automatic styles for formatting of tables which
           are referenced by the exporter.

     	2. It contains =<text:sequence-decl>=
           ... =</text:sequence-decl>= elements that control how
           various entities - tables, images, equations etc - are
           numbered.

*** Overriding factory styles

The following two variables control the location from which the ODT
exporter picks up the custom styles and content template files. You
can customize these variables to override the factory styles used by
the exporter.

- =org-odt-styles-file= ::

     Use this variable to specify the =styles.xml= that will be used
     in the final output. You can specify one of the following values:

     1. A =styles.xml= file

	Use this file instead of the default =styles.xml=

     2. A =.odt= or =.ott= file

	Use the =styles.xml= contained in the specified OpenDocument
        Text or Template file

     3. A =.odt= or =.ott= file and a subset of files contained within
        them

     	Use the =styles.xml= contained in the specified OpenDocument
        Text or Template file. Additionally extract the specified
        member files and embed those within the final =ODT= document.

     	Use this option if the =styles.xml= file references additional
        files like header and footer images.

     4. =nil=

	Use the default =styles.xml=

- =org-odt-content-template-file= ::

     Use this variable to specify the blank =content.xml= that will be
     used in the final output.

** Creating one-off styles
:PROPERTIES:
:DESCRIPTION: How to produce custom highlighting etc
:END:

There are times when you would want one-off formatting in the exported
document. You can achieve this by embedding raw OpenDocument XML in
the Org file. The use of this feature is better illustrated with
couple of examples.

1. Embedding ODT tags as part of regular text

   You can include simple OpenDocument tags by prefixing them with
   =@=.  For example, to highlight a region of text do the following:

   #+BEGIN_EXAMPLE
       @<text:span text:style-name="Highlight">This is a
       highlighted text@</text:span>.  But this is a
       regular text.
   #+END_EXAMPLE

   *Hint:* To see the above example in action, edit your =styles.xml=
   (see [[*Factory styles]]) and add a custom =Highlight= style as shown
   below.

   #+BEGIN_EXAMPLE
       <style:style style:name="Highlight" style:family="text">
         <style:text-properties fo:background-color="#ff0000"/>
       </style:style>
   #+END_EXAMPLE

2. Embedding a one-line OpenDocument XML

   You can add a simple OpenDocument one-liner using the =#+ODT:=
   directive. For example, to force a page break do the following:

   #+BEGIN_EXAMPLE
       #+ODT: <text:p text:style-name="PageBreak"/>
   #+END_EXAMPLE

   *Hint:* To see the above example in action, edit your =styles.xml=
   (see [[*Factory styles]]) and add a custom =PageBreak= style as shown
   below.

   #+BEGIN_EXAMPLE
       <style:style style:name="PageBreak" style:family="paragraph"
                style:parent-style-name="Text_20_body">
         <style:paragraph-properties fo:break-before="page"/>
       </style:style>
   #+END_EXAMPLE

3. Embedding a block of OpenDocument XML

   You can add a large block of OpenDocument XML using the
   =#+BEGIN_ODT= ... =#+END_ODT= construct.

   For example, to create a one-off paragraph that uses bold text, do
   the following:

   #+BEGIN_EXAMPLE
       #++BEGIN_EXPORT ODT
       <text:p text:style-name="Text_20_body_20_bold">
       This paragraph is specially formatted and uses bold text.
       </text:p>
       #++END_EXPORT ODT
   #+END_EXAMPLE

** Customizing tables in ODT export
:PROPERTIES:
:DESCRIPTION: How to define and use Table templates
:END:

#+cindex: @samp{ATTR_ODT}, keyword
You can override the default formatting of the table by specifying a
custom table style with the =#+ATTR_ODT= line. For a discussion on
default formatting of tables see [[*Tables in ODT export]].

This feature closely mimics the way table templates are defined in the
OpenDocument-v1.2 specification.[fn:14]

*** Custom table styles - an illustration

To have a quick preview of this feature, install the below setting and
export the table that follows.

#+BEGIN_SRC lisp
  (setq org-odt-table-styles
	(append org-odt-table-styles
		'(("TableWithHeaderRowAndColumn" "Custom"
		   ((use-first-row-styles . t)
		    (use-first-column-styles . t)))
		  ("TableWithFirstRowandLastRow" "Custom"
		   ((use-first-row-styles . t)
		    (use-last-row-styles . t))))))
#+END_SRC

#+BEGIN_EXAMPLE
    #+ATTR_ODT: :style "TableWithHeaderRowAndColumn"
    | Name  | Phone | Age |
    | Peter |  1234 |  17 |
    | Anna  |  4321 |  25 |
#+END_EXAMPLE

In the above example, you used a template named =Custom= and installed
two table styles with the names =TableWithHeaderRowAndColumn= and
=TableWithFirstRowandLastRow=. (*Important:* The OpenDocument styles
needed for producing the above template have been pre-defined for you.
These styles are available under the section marked â€˜Custom Table
Template' in OrgOdtContentTemplate.xml (see [[*Factory styles]]). If you
need additional templates you have to define these styles yourselves.

*** Custom table styles - the nitty-gritty

To use this feature proceed as follows:

1. Create a table template[fn:15]

   A table template is nothing but a set of =table-cell= and
   =paragraph= styles for each of the following table cell categories:

   - Body
   - First column
   - Last column
   - First row
   - Last row
   - Even row
   - Odd row
   - Even column
   - Odd Column

   The names for the above styles must be chosen based on the name of
   the table template using a well-defined convention.

   The naming convention is better illustrated with an example. For a
   table template with the name =Custom=, the needed style names are
   listed in the following table.

   | Table cell type | =table-cell= style           | =paragraph= style                 |
   |-----------------+------------------------------+-----------------------------------|
   |                 |                              |                                   |
   | Body            | =CustomTableCell=            | =CustomTableParagraph=            |
   | First column    | =CustomFirstColumnTableCell= | =CustomFirstColumnTableParagraph= |
   | Last column     | =CustomLastColumnTableCell=  | =CustomLastColumnTableParagraph=  |
   | First row       | =CustomFirstRowTableCell=    | =CustomFirstRowTableParagraph=    |
   | Last row        | =CustomLastRowTableCell=     | =CustomLastRowTableParagraph=     |
   | Even row        | =CustomEvenRowTableCell=     | =CustomEvenRowTableParagraph=     |
   | Odd row         | =CustomOddRowTableCell=      | =CustomOddRowTableParagraph=      |
   | Even column     | =CustomEvenColumnTableCell=  | =CustomEvenColumnTableParagraph=  |
   | Odd column      | =CustomOddColumnTableCell=   | =CustomOddColumnTableParagraph=   |

   To create a table template with the name =Custom=, define the above
   styles in the =<office:automatic-styles>=
   ... =</office:automatic-styles>= element of the content template
   file (see [[*Factory styles]]).

2. Define a table style[fn:16]

   To define a table style, create an entry for the style in the
   variable =org-odt-table-styles= and specify the following:

   - the name of the table template created in step (1)
   - the set of cell styles in that template that are to be activated

   For example, the entry below defines two different table styles
   =TableWithHeaderRowAndColumn= and =TableWithFirstRowandLastRow=
   based on the same template =Custom=. The styles achieve their
   intended effect by selectively activating the individual cell
   styles in that template.

   #+BEGIN_SRC lisp
     (setq org-odt-table-styles
	   (append org-odt-table-styles
		   '(("TableWithHeaderRowAndColumn" "Custom"
		      ((use-first-row-styles . t)
		       (use-first-column-styles . t)))
		     ("TableWithFirstRowandLastRow" "Custom"
		      ((use-first-row-styles . t)
		       (use-last-row-styles . t))))))
   #+END_SRC

3. Associate a table with the table style

   #+cindex: @samp{ATTR_ODT}, keyword
   To do this, specify the table style created in step (2) as part of
   the =ATTR_ODT= line as shown below.

   #+BEGIN_EXAMPLE
       #+ATTR_ODT: :style "TableWithHeaderRowAndColumn"
       | Name  | Phone | Age |
       | Peter |  1234 |  17 |
       | Anna  |  4321 |  25 |
   #+END_EXAMPLE

** Validating OpenDocument XML
:PROPERTIES:
:DESCRIPTION: How to debug corrupt OpenDocument files
:END:

Occasionally, you will discover that the document created by the ODT
exporter cannot be opened by your favorite application. One of the
common reasons for this is that the =.odt= file is corrupt. In such
cases, you may want to validate the document against the OpenDocument
RELAX NG Compact Syntax (RNC) schema.

For de-compressing the =.odt= file[fn:17]: See [[info:emacs::File
Archives]]. For general help with validation (and schema-sensitive
editing) of XML files: See [[info:nxml-mode::Introduction]].

If you have ready access to OpenDocument =.rnc= files and the needed
schema-locating rules in a single folder, you can customize the
variable =org-odt-schema-dir= to point to that directory. The ODT
exporter will take care of updating the =rng-schema-locating-files=
for you.

* Main Index
:PROPERTIES:
:INDEX:    cp
:DESCRIPTION: Index of concepts related to OpenDocumentText format
:END:

* Key Index
:PROPERTIES:
:DESCRIPTION: Key bindings used for export
:INDEX:    ky
:END:

* Command and Function Index
:PROPERTIES:
:DESCRIPTION: Commands used for export
:INDEX:    fn
:END:

* Variable Index
:PROPERTIES:
:DESCRIPTION: Options that control the exporter
:INDEX:    vr
:END:

* What is New
:PROPERTIES:
:DESCRIPTION: Features exclusive to this exporter
:INDEX:    wn
:END:

#+texinfo: @printindex wn

* Footnotes

[fn:1] [[http://www.info-zip.org/][Info-ZIP]]

[fn:2] [[https://imagemagick.org][ImageMagick]]

[fn:3] [[http://www.tug.org/texlive/][TeX Live]]

[fn:4] [[http://www.nongnu.org/dvipng/][dvipng]]

[fn:5] [[https://imagemagick.org][ImageMagick]]

[fn:6] [[http://dlmf.nist.gov/LaTeXML/][LaTeXML]]

[fn:7] [[http://www.mathtoweb.com/cgi-bin/mathtoweb_home.pl][MathToWeb]]

[fn:8] [[https://www.jabref.org/][JabRef]]

[fn:9] See [[http://www.mathtoweb.com/cgi-bin/mathtoweb_home.pl][MathToWeb]]

[fn:10] Use of ImageMagick is only desirable. However, if you routinely
produce documents that have large images or you export your Org files
that has images using a Emacs batch script, then the use of
ImageMagick is mandatory.

[fn:11] Your =htmlfontify.el= library must at least be at Emacs 24.1
levels for fontification to be turned on.

[fn:12] See section titled /Berkeley-style citations/ at https://pandoc.org/org.html

[fn:13] See
[[https://github.com/kjambunathan/JabRefChicagoForOrgmode][Jabref
Plugin for export to Chicago Manual of Style in ~OpenDocument~
format]].  This a port of
[[https://github.com/JabRef/layouts.jabref.org/tree/master/Chicago%20(English)][Jabref's
Plugin for export to Chicago Manual of Style in ~RTF~ format]].

[fn:14] [[http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html][OpenDocument-v1.2 Specification]]

[fn:15] See the =<table:table-template>= element of the
OpenDocument-v1.2 specification

[fn:16] See the attributes =table:template-name=,
=table:use-first-row-styles=, =table:use-last-row-styles=,
=table:use-first-column-styles=, =table:use-last-column-styles=,
=table:use-banding-rows-styles=, and =table:use-banding-column-styles=
of the =<table:table>= element in the OpenDocument-v1.2 specification

[fn:17] =.odt= files are nothing but =zip= archives

[fn:18] The column widths are interpreted as weighted ratios with the
default weight being 1
